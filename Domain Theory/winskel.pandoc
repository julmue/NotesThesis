# Formal Semantics of Programming Languages

## Einleitung

### Was ist eine Semantik?

Semantik einer Programmiersprache: Bedeutung einer Programmiersprache

Formale Semantik für eine Programmiersprache: mathematisches Modell.

Der Zweck dieses mathematischen Modells: Verständnis des Programmverhaltens
* Die Suche eines Modells
   Eine formale Semantik zu definieren macht viele wichtige subtile Eigenschaften 
   einer Programmiersprache explizit.
* Ein vorhandenes Modell:
    Grundlage zur Verwendung mathematischer/logische Methoden bei der Programmanalyse:
    * Laufzeitanalyse
    * Verifikation


### Einteilungen der Semantiken

Einteilung der Semantiken aus historischer Sicht:
* Operationale Semantik (Interpretermethode):
	Operationale Semantik beschreibt die Bedeutung eines Programmes
	durch die Spezifikation seines Laufzeitverhaltens auf einer abstrakten Maschine.
	Hier: Syntaktische Spezifikation, Auswertungsrelation über Termen.

* Denotationale Semantik (mathemtische Semantik):
	Verwendet die mathematischen:
	* vollständige Halbordnungen (complete partial order/cpo).
	* stetige Funktionen (continuous functions).
	* kleinste Fixpunkte (least fixed points).

* Axiomatische Semantik
	Legt die Bedeutung eines Programms durch die Anwendung von
	Beweisregeln in einer Programmlogik (Hoare-Kalkül) fest.
	Betonung auf Programmkorrektheit.

Diese drei Konzepte schließen sich gegenseitig nicht aus.
Jede hat ihre Stärken:
* Operationale Semantik ist wichtig für die Implementierung
* Axiomatische Semantik ist wichtig für Entwicklung und Verifikation
* Denotationale Semantik (super aber warum???)

Die unterschiedlichen Semantiken hängen auch voneinander ab;
Der Nachweis, dass die Beweisregeln einer axiomatischen Semantik korrekt sind
erfolgt relativ zur operationalen und denotationalen Semantik.

Der Nachweis, dass eine Implementierung korrekt ist 
erfolgt durch den Abgleich von operationaler und denotationaler Semantik.

Bei der Untersuchung der operationalen Semantik ist eine denotationale 
Semantik ein mächtiges Werkzeug:
* Abstraktion von unwichtigen Implementierungsdetails
* Abstraktere Konzepte die zur Untersuchung der Berechnung/Paradigma

Forschungsprogramm der letzten Jahre:
Unifikation dieser Ansätze (noch aktuell?).

### Bedeutung der Logik in der Semantik

Logik hat eine zentrale Rolle in der Semantik.

Gödels Unvollständigkeitssatz:
Unmöglichkeit einer vollständigen axiomatischen Semantik.



<!-- ----------------------------------------------------------------------- -->
## Mengenlehre

### Mengen

#### Fundierungsaxiom
Fundierungsaxiom (axiom of foundation) auch Regularitätsaxiom (axiom of regularity):
Axiom von ZF.

Aussage: 
Elementketten (Ketten aus Elementbeziehungnen) sind immer endlich;
daraus folgt: Keine Menge kann Element von sich selbst sein.

Verhindert Russells Paradoxon.


### Funktionen


#### partielle Funktionen
partielle Funktionen:
* definiert
* undefiniert


#### Lamdanotation (anonyme Funktionen)
Praktisch: intensionale Funktionsbeschreibung (Beschreibung der Abbildungsvorschriften)
durch Verwendung von Lambdanotation.

Vorteil: Anonyme Funktionen

#### Funktionscomposition


### Abzählbare Menge
Jede Menge mit einer Bijektion mit einer Untermenge der natürlichen Zahlen 
heißt abzählbar.
	

### Cantors Diagonalargument

Diagonalbeweise (als Beweismethode) sind in der Informatik häufig anzutreffen.



<!-- ----------------------------------------------------------------------- -->
## Einführung in die operationale Semantik

Inhalt des Kapitels:
Syntax der prozeduralen Programmiersprache **IMP**,
eine kleine Sprache von *While*-Programmen.

Formale operationale Beschreibung des Verhaltens von **Imp**:
Regen die Beschreiben wie die Ausdrücke der Sprache ausgewertet werden.

Diese Regeln beschreiben eine Operationale Semantik für **IMP**
in dem Sinn, dass sie einfach in einer anderen Programmiersprache 
implementiert werden können.


### IMP -- eine einfache imperative Sprache

Die syntaktischen Mengen die mit **Imp** assoziiert sind:
1. Nummer **N**: positive und negative Ganzzahlen mit $0$
2. Wahrheitswerte **T**: $\{true, false\}$
3. Speicherplätze (locations) **LOC**,
4. Aritmethische Ausdrücke **Aexp**
5. Boolsche Ausdrücke **Bexp**
6. Kommandos **Com**

Annahme: 
Bekannt: syntaktische Struktur von Nummern und Speicherplätzen.

Anmerkung:
Positionen werden auch oft Programmvariablen genannt;
hier wird dieser Name für ein anderes Konzept verwendet.

Anmerkung:
Für die anderen syntaktischen Mengen müssen intensionale Definitionen angegeben
werden. 
Induktive Definition durch einen Generator definiert in BNF:

Konvention:
* $n$, $m$ sind Metavariablen über Ganzzahlen **N**.
* $X$, $Y$ sind Metavariablen über Speicherplätzen **Loc**.
* $a$ sind Metavariablen über arithmetischen Ausdrücken **Aexp**.
* $b$ sind Metavariablen über boolschen Ausdrücken **Bexp**.
* $c$ sind Metavariablen über Kommandos **Com**.


Definition: Grammatik von **IMP**

Ausdrücke von **IMP**

:   aritmetische Ausdrücke **Aexp**

        a ::= n | X | a0 + a1 | a0 - a1 | a0 * a1

    boolsche Ausdrücke **Bexp**

        b ::= true | false | a0 = a1 | a0 <= a1 | ~b | b0 && b1 | b0 || b1

    Kommandos

        c ::= skip | X := a | c0;c1 | if b then c0 else c1 | while b do c


Definition: Syntaktische Äquivalenz

Syntaktische Äquivalens $≡$ .


### Auswertung (evaluation) aritmetische Ausdrücke

Intuivites Verständnis des Programmablaufs:
Zustand determiniert von den Einträgen in den Speicherplätzen (Variablen).

Daran orientiert sich auch das Modell:
1. Zustände (states)
2. Auswertung von **Aexp** und **Bexp**
3. Ausführung von Kommandos **Com**

Die Zustandsmenge $Σ$ besteht aus Funktionen $σ : Loc → N$ von Speicherplätzen
auf Zahlen (Momentaufnahem des Speichers);
$σ(X)$ ist damit der Wert, oder Inhalt, des Speicherplatzes $X$ im Zustand $σ$ .

Definition: Konfigurationen
Auswertung eines arithmetischen Ausdrucks $a$ im Zustand $σ$ .
Repräsentation durch eine Konfiguration: $<a,σ>$ 

Definition: Evaluationsrelation $<a,σ> → n$
Evaluationsrelation: Ausdruck $a$ wird im Zustand $σ$ zu $n$ ausgewertet.


Definition: Syntax-gerichtete Definition der Auswertungsrelation

Auswertungsrelation(1): Auswertung arithmetischer Ausdrücke

 :  Auswertung von Nummern (Evaluation of Numbers)
   (jede Nummer ist bereits fertig ausgewertet)

        <n,σ> → n
    
    Auswertung von Speicherplätzen
    (jeder Speicherplatz wird zu seinem Inhalt ausgewertet)

        <X,σ> → σ(X)

    Auswertung der Addition (n ist die Summe von n0 und n2)

        <a0,σ> → n0    <a1,σ> → n1
        --------------------------
          <a0 = a1, σ> → n

     Auswertung der Subtraktion (n ist die Differenz von n0 und n1)

        <a0,σ> → n0    <a1,σ> → n1
        --------------------------
          <a0 - a1, σ> → n

    Auswertung der Multiplikation (n ist das Produkt von n0 und n1)

        <a0,σ> → n0    <a1,σ> → n1
        --------------------------
          <a0 - a1, σ> → n



Axiome

:   Schlussregeln ohne Prämissen sind Axiome. Beispiel:

        ---------
        <n,σ> → n


Regelinstanz (Instanziierung einer Regel)

 :  Eine Regelinstanz entsteht durch einsetzen von Werten aus den entsprechenden
    syntaktischen Kategorien in die Metavariablen. Beispiel:

        <2,σ0> → 2    <3,σ0> → 3
        ------------------------
        <2 * 3, σ0> → 6


Derivationsbaum (Derivation)

 :  Ableitungsbaum von Regelinstanzen zur Auswertung eines Ausdrucks.



#### Nichtdeterministische Evaluation

Bei einigen Ausdrücken können mehrere Regeln angewandt werden.
Alle dieser Regeln müssen angewandt werden (Fallunterscheidung).


#### Operationale Semantik

Hier: 
Strukturelle operationale Semantik wegen der syntaxgerichteten
Art wie die Regeln präsentiert werden aka
Natürliche Semantik wegen der Art der Präsentation die an das KNS erinnert.

Diese Regeln, die als die Auswertung eines gegebenen Ausdrucks (Programms)
auf einer abstrakten Maschine betrachtet werden können geben diesem Ausdruck
eine operationale Semantik.
(Kann auch auf andere Weise als der hier dargestellten passieren)



#### Semantische Äquivalenzrelation

Zwei Ausdrücke/Programme sind semantisch äquivalent, wenn sie für jeden
Eingabewert den gleichen Ausgabewert ausgeben.



### Die Auswertung boolsches Ausdrücke

Auswertungsrelation(2): Auswertung boolscher Ausdrücke

 :  Auswertung boolscher Ausdrücke

        <true,σ> → true

        <false,σ> → false
   
        <a0,σ> → n    <a1,σ> → m
        ------------------------    (wenn m und n gleich)
          <a0 = a1,σ> → true

        <a0,σ> → n    <a1,σ> → m
        ------------------------    (wenn m und n ungleich)
          <a0 = a1,σ> → false

        <a0,σ> → n    <a1,σ> → m
        ------------------------    (wenn m kleiner gleich n)
          <a0 <= a1,σ> → true

        <a0,σ> → n    <a1,σ> → m
        ------------------------    (wenn m nicht kleiner gleich n)
          <a0 <= a1,σ> → false

        <b,σ> → true            <b,σ> → false 
        --------------          --------------
        <~b,σ> → false          <~b,σ> → true 

        <b0,σ> → t0    <b1,σ> → t1
        ------------------------
          <b0 && b1,σ> → t

        <b0,σ> → t0    <b1,σ> → t1
        ------------------------
          <b0 || b1,σ> → t


#### Äquivalenzrelationen über boolschen Ausdrücken





### Die Ausführung von Kommandos

Die Rolle von Ausdrücken ist es zu bestimmten Werten in einem bestimmten
Zustand ausgewertet zu werden.

Die Rolle von Programmen, und damit Kommandos, ist es ausgeführt zu werden
und den Zustand zu verändern.

Wenn ein **IMP** Programm ausgeführt wird sind initial alle Speicherplätze 
auf $0$ gesetzt:
Der *Initialzustand* $σ0$ hat die Eigenschaft, dass $σ0(X) = 0$ für alle
Register $X$.

Die Ausführung kann mit einem finalen Zustand terminieren oder divergieren
und ohne Finalzustand unendlich weiterlaufen.

Kommandokonfiguration

 :  Ein Paar $<c,σ>$ repräsentiert eine (Kommando-)Konfiguration von der aus 
    das Kommando $c$ im Zustand $σ$ gestartet wird.

Ausführungsrelation

 :  $<c,σ> → σ'$ (Big Step) bedeutet, dass die Ausführung von $c$ in $σ$ in $σ'$
    terminiert. 
    Bespiel: $<X := 5,σ> → σ'$ wobei $σ'$ der Zustand $σ$ mit $5$ and der Stelle
    $X$ ist.


Notation:
Sei $σ$ ein Zustand, $n ∈$ **N**, $X ∈$ **Loc**. $σ\[m/X\]$ Update.

Beispiel: $<X := 5,σ> → σ[5/X]$


Auswertungsrelation(3): Ausführung von Kommandos

 :  Ausführung von Kommandos

    atomare Kommandos

        <skip,σ> → σ 

             <a,σ> → m
        -------------------
        <X := σ> → σ[m/X]
        

     Sequenzierung

         <c0,σ> → σ''    <c1,σ''> → σ'
        ------------------------------
        <c0;c1,σ> → σ'

    Konditionale

         <b,σ> → true    <c0,σ''> → σ'
        ------------------------------
        <if b then c0 else c1 ,σ> → σ'

         <b,σ> → false    <c1,σ''> → σ'
        ------------------------------
        <if b then c0 else c1 ,σ> → σ'

    While-loops

        <b,σ> → false
        ------------------
        <while b do c,σ> → σ

        <b,σ> → true    <c,σ> → σ''    <while b do c, σ''> → σ'
        -------------------------------------------------------
            <while b do c, σ> → σ'


#### Äquivalenzrelation über Kommandos
